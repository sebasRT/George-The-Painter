---
import arrow from "../../assets/icons/arrow.svg";
---

<div class="group relative md:hidden mx-auto w-32" id="services-dropdown ">
    <input
        type="checkbox"
        class="absolute top-0 left-0 peer/checkbox w-full h-full opacity-0"
        id="checkbox"
    />
    <button
        id="dropdown-button"
        class="peer/button group peer-checked/checkbox:-z-10 group-hover:text-emerald-100 focus-within:text-emerald-100 transition flex items-center gap-2 mx-auto"
    >
        Services
        <img src={arrow.src} class="group-focus-within:fill-emerald-100" />
    </button>
    <ul
        id="dropdown-menu"
        class="absolute peer-focus-within/button:block hidden bg-gray-800/95 mt-3 p-3 *:p-3 *:whitespace-nowrap"
    >
        <li><a href="/exterior-painting">Exterior painting</a></li>
        <li><a href="/interior-painting">Interior painting</a></li>
        <li><a href="">Drywall repair</a></li>
        <li><a href="">Power washing</a></li>
    </ul>
</div>
<script>
    // document.addEventListener('astro:page-load',() => {

    const dropdownButton = document.getElementById(
        "dropdown-button",
    ) as HTMLButtonElement | null;
    const checkbox = document.getElementById(
        "checkbox",
    ) as HTMLInputElement | null;

    function removerEjecutarReinstalar<T extends EventListener>(
        elemento: EventTarget,
        evento: string,
        funcionRemover: T,
        funcionEjecutar: () => void,
        funcionReinstalar?: () => void,
    ) {
        elemento.removeEventListener(evento, funcionRemover);

        funcionEjecutar();

        setTimeout(() => {
            elemento.addEventListener(evento, funcionRemover);

            if (funcionReinstalar) {
                funcionReinstalar();
            }
        }, 100);
    }

    const checkboxChangeListener = (ev: Event) => {
        const target = ev.target as HTMLInputElement;
        if (target.checked && dropdownButton) {
            dropdownButton.focus();
        } else if (dropdownButton) {
            dropdownButton.blur();
        }
    };

    const onBlurChangeListener = () => {
        if (checkbox) {
            removerEjecutarReinstalar(
                checkbox,
                "change",
                checkboxChangeListener,
                () => {
                    setTimeout(() => {
                        if (checkbox.checked) {
                            checkbox.checked = false; // Asegura que el checkbox se desactive cuando dropdownButton pierde el foco
                        }
                    }, 300);
                },
            );
        }
    };

    // Agregar event listener para el evento blur al dropdownButton
    dropdownButton?.addEventListener("blur", onBlurChangeListener);

    // Agregar event listener para el evento change al checkbox
    checkbox?.addEventListener("change", checkboxChangeListener);
    // })
</script>
